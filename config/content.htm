<h1>About</h1>
<p>機械設計工程系大一與精密機械工程科五專一網際內容管理課程.</p>
<p>課程網頁: <a href="https://mde.tw/wcm2022">https://mde.tw/wcm2022</a></p>
<p>課程倉儲: <a href="https://github.com/mdecourse/wcm2022">https://github.com/mdecourse/wcm2022</a></p>
<p>課程規劃與作業: <a href="https://github.com/mdecourse/wcm2022/discussions">https://github.com/mdecourse/wcm2022/discussions</a></p>
<p>課程討論區: <a href="https://gitter.im/mdecourse/wcm2022">https://gitter.im/mdecourse/wcm2022</a></p>
<p>Downloads: 下載 <a href="https://drive.google.com/file/d/1OCdXqr86xQD-uSODKoB9mAvNrdlBx-iX/view?usp=sharing">compile_copsim_wcm2022.7z</a> (下載 513 MB, 解開壓縮後 2.3GB, under wcm2022 At mde) - 包含 Python 3.9.5, Portablegit, Scite, ShareX, Wink, GitEtensions 等工具.</p>
<p style="padding-left: 30px;">下載 <a href="https://drive.google.com/file/d/1Cq6J8hVS0JUBAu8Nkt2pfrCK5ua3OYnF/view?usp=sharing">PUTTY.7z</a> (下載 940 KB, 解開壓縮後 4 MB)</p>
<p style="padding-left: 30px;">下載 <a href="https://drive.google.com/file/d/1ZrLiGxB_aUFkH1TusgOdXaeWio4Tjbge/view?usp=sharing">robodk_rokisim.7z</a> (下載 434 MB, 解開壓縮後  1.2 GB)</p>
<p style="padding-left: 30px;">下載 <a href="https://drive.google.com/file/d/1xPTJjhQR0GVIJbyhUwzrjzv5M-nbaenk/view?usp=sharing">msys2_and_cmake.7z</a> (下載 3.7 GB, 解開壓縮後  13.3 GB)</p>
<p style="padding-left: 30px;">下載 <a href="https://drive.google.com/file/d/1D_8VZVzostVHOhzgv9HUbSFSpxNOYJe4/view?usp=sharing">coppeliasim_4.2_and_4.1.7z</a> (下載 566 MB, 解開壓縮後 1.5 GB )</p>
<hr/>
<h4>課程簡介:</h4>
<p style="padding-left: 30px;">回到 1997 年, <a href="https://en.wikipedia.org/wiki/Google">Google</a> 成立的前一年, 看看 <a href="https://link.springer.com/book/10.1007/978-1-349-14456-3">Mastering the Internet</a> (1) 這本電子書, 了解與網際網路相關的各項術語與相關內容.</p>
<p style="padding-left: 30px;">至 2008 年, <a href="https://en.wikipedia.org/wiki/Git">Git</a> 被創建後三年, HTML 已經推出 HTML5, 2011 年出版的 <a href="https://link.springer.com/book/10.1007/978-1-4302-3387-9">HTML5 Solutions: Essential Techniques for HTML5 Developers</a> (2), 介紹許多全球資訊網 (World Wide Web) 相關的內容.</p>
<p style="padding-left: 30px;">與 TCP/IP 有關的資料可以參考 2014 出版的 <a href="https://link.springer.com/book/10.1007/978-3-319-05152-9">Guide to OSI and TCP/IP Models</a> (3).</p>
<p style="padding-left: 30px;">Windows 10 參考書: <a href="https://link.springer.com/book/10.1007/978-1-4842-0925-7">Windows 10 troubleshooting</a> (4) and <a href="https://link.springer.com/book/10.1007/978-1-4842-3294-1">The Windows 10 Productivity Handbook</a> (5).</p>
<p style="padding-left: 30px;">Ubuntu 參考書: <a href="https://link.springer.com/book/10.1007/978-1-4842-3000-8">Beginning Ubuntu for Windows and Mac Users</a> (6).</p>
<p style="padding-left: 30px;">Pro Git 參考書: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> (7)</p>
<p style="padding-left: 30px;">網際內容管理 (Web-based Content Management) 課程就是在全球資訊網的環境中, 介紹與機械工程相關的內容管理系統. 其中包括 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 與 <a href="https://www.fossil-scm.org">Fossil SCM</a> server.</p>
<p style="padding-left: 30px;">由於電腦輔助設計室中有 11 台電腦中的第三磁區是沒有防寫卡保護的 Windows 10 操作系統, 網際內容管理課程會在這些電腦中安裝 Windows 10 與 Ubuntu 操作系統, 並介紹如何配置 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 與 <a href="https://www.fossil-scm.org">Fossil SCM</a> server.</p>
<p style="padding-left: 30px;">與 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 有關的說明請參考 <a href="https://mde.tw/cmstemplate">https://mde.tw/cmstemplate</a>.</p>
<p style="padding-left: 30px;">與 <a href="https://www.fossil-scm.org">Fossil SCM</a> server 有關的說明請參考 <a href="https://mde.tw/pj5073">https://mde.tw/pj5073</a>.</p>
<p style="padding-left: 30px;">網際課程作業將請各學員在 Github, Gitlab 與 Bitbucket 上建立 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 倉儲, 並以 Github Pages 的網頁展示內容.</p>
<p style="padding-left: 30px;">課程作業簡報請嘗試利用 <a href="https://github.com/KmolYuan/reveal-yaml-rs">https://github.com/KmolYuan/reveal-yaml-rs</a> 建立.</p>
<p style="padding-left: 30px;">PDF 課程作業則請嘗試利用 <a href="https://github.com/KmolYuan/latex-paper">https://github.com/KmolYuan/latex-paper</a> 製作.</p>
<p style="padding-left: 30px;">課程目標: 了解如何利用網際 (Web (Internet)-based) 技術在多人異地環境下, 執行協同自動控制與設計所需的電腦軟硬體架構及知識.</p>
<h4 style="padding-left: 30px;">範例:</h4>
<p style="padding-left: 60px;">利用商用 CAD 建立網際設計自動化接案系統:</p>
<p style="padding-left: 90px;"><a href="https://www.driveworkslive.com/">https://www.driveworkslive.com/</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/DriveWorks">https://github.com/DriveWorks</a></p>
<p style="padding-left: 60px;">利用開源 CAD 建立 3D 模型, 執行輔助設計及轉檔:</p>
<p style="padding-left: 90px;"><a href="https://github.com/coletek/pyMDA">https://github.com/coletek/pyMDA</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<p style="padding-left: 60px;">將絕版紙本書轉為網際多媒體版:</p>
<p style="padding-left: 90px;"><a href="https://archive.org/details/in.ernet.dli.2015.140589/page/n37/mode/2up">Introduction To The Mechanics Of A Continuous Medium</a></p>
<h4>頁面總結:</h4>
<p style="padding-left: 30px;">網際內容管理課程將配合上述 7 本電子書中的資料實際讓學員在 Windows 與 Ubuntu 環境中建立適合機械工程師使用的網際內容管理系統.</p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>Github</h2>
<p>Github 是一套提供<span style="background-color: #ccffcc;">全球資訊網服務介面</span>的<span style="background-color: #ccffcc;">分散式版次管理系統</span>.</p>
<p>全球資訊網服務介面: 可使用瀏覽器登入系統後維護內容</p>
<p>分散式版次控制(管理)系統: distributed version control system</p>
<p>控制為手段, 管理為目的.</p>
<p>Git: Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p><h2>WCM</h2>
<p>一般的 <a href="https://en.wikipedia.org/wiki/Web_content_management_system">WCM</a> 指的是 Web Content Management, 其中的 Web 特指 Web pages 也就是全球資訊網 (World Wide Web) 網站 (Website) 上的內容. 此類的 WCM 可以稱為<span style="text-decoration: underline;"><span style="background-color: #ffff99;">網頁內容管理</span></span>.</p>
<p>而 Web-based Content Management 則指<span style="background-color: #ffff99;">基於全球資訊網相關技術的內容管理</span>, 其中的內容除了全球資訊網外, 還整合包含來自其他應用 Internet (TCP/IP) 架構的伺服器內容 (例如: <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a>, <a href="https://robodk.com">Robodk</a> 與 <a href="https://cyberbotics.com/">Webots</a> 伺服器, 或自建的機電資軟硬體虛實整合伺服器套件), 透過 Web-based 的架構整合在一個全球資訊網站中. 在此將 Web (and Internet) based Content Management 稱為<span style="text-decoration: underline;"><span style="background-color: #ffff99;">網際內容管理</span></span>.</p>
<h2>Brython</h2>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a> <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> <a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a></p>
<p><a href="https://gist.github.com/mdecourse/05930b1775b77293523b59b1bbb43e57">Gist Brython scripts</a></p>
<p><a href="https://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a></p>
<p><a href="https://mde.tw/cp2021/content/Cango.html">Cango</a></p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="knova1">knova1</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## ycqsort end
</script>
</p><h3>ggame</h3>
<p><a href="https://github.com/mdecourse/ggame">ggame</a> 執行需要 downloads/brython_modules.js 與</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div class="col-md-0" height="1" id="graphics-column" width="1"&gt;&lt;/div&gt;</pre>
<p> 上一頁面已經將 <a href="https://github.com/mdecourse/ggame">ggame</a> 從 brython 模組轉為 javascript (<a href="https://mde.tw/cp2021/downloads/JavaScript Course Notes.pdf">note</a>) 模組(<a href="http://mde.tw/cp2021/content/%E5%AD%B8%E7%BF%92%E7%A8%8B%E5%BC%8F.html">方法</a>), 名稱為 <a href="/downloads/brython_modules.js">brython_modules.js</a> 放在 downloads 目錄中.</p><h2>Heroku</h2>
<p>教務主機: <a href="https://qry.nfu.edu.tw/">https://qry.nfu.edu.tw/</a> (提供教務資料服務)</p>
<p>Heroku: <a href="https://www.heroku.com/">https://www.heroku.com/</a> (提供執行網際 Python 服務)</p>
<p>可以利用 Brython 直接從教務主機擷取資料嗎?</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> </p>
<p style="padding-left: 30px;"><a href="https://nfulist.herokuapp.com/?semester=1101&amp;courseno=0766&amp;column=True">https://nfulist.herokuapp.com/?semester=1101&amp;courseno=0766&amp;column=True</a> </p>
<p>假如需要透過 Python 模組或 C/C++ 動態連結程式庫執行 Brython, 可以透過 Brython + Heroku 完成嗎?</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/wcm2021/content/Heroku-%E5%AF%A6%E4%BD%9C.html">Heroku 實作 </a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/lab/content/Heroku.html">http://mde.tw/lab/content/Heroku.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/wcm2021/content/Heroku.html">http://mde.tw/wcm2021/content/Heroku.html</a></p><h1>Programming</h1>
<h4><a href="https://github.com/mdecourse/wcm2022/discussions/5#discussion-3797589">計算機程式的教與學</a>:</h4>
<p><a href="https://mde.tw/cp2021/content/%E5%AD%B8%E7%BF%92%E7%A8%8B%E5%BC%8F.html">學習程式</a></p>
<p><a href="https://www.indiatoday.in/education-today/featurephilia/story/why-computer-programming-or-coding-is-so-important-for-students-in-today-s-era-1789171-2021-04-09">why-computer-programming-or-coding-is-so-important-for-students-in-today-s-era</a>?</p>
<p><a href="https://www.rasmussen.edu/degrees/technology/blog/why-learn-to-code/">why learn to code</a>?</p>
<p>利用 <a href="http://mde.tw/wcm2022/content/Brython.html">Brython 程式範例</a>可以讓計算機程式課程的學習者, 直接利用瀏覽器與 <a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github Gist</a> 練習程式編寫.</p>
<p>其中 <a href="https://brython.info/">Brython 程式語法</a>可以與 Javascript 程式庫結合應用 (例如: <a href="https://www.arc.id.au/CanvasGraphics.html">Cango</a>, <a href="https://pixijs.com/">PixiJS</a>, <a href="https://konvajs.org/">KonvaJS</a>), 且能透過 <a href="https://brython.info/static_doc/en/ajax.html">AJAX</a> 與 Flask 伺服器端的 Python 或 C/C++ dll <a href="https://mde.tw/cp2021_hw/content/Tiny%20C.html">結合應用</a>.</p>
<h4><a href="http://mde.tw/wcm2022/content/Brython.html">Brython 程式範例</a>的延伸教學:</h4>
<h4><a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py">五個紅點方塊</a>:</h4>
<p style="padding-left: 30px;">1. <a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py">五個紅點方塊</a>以隨機方式產生時, 會隨機標上 1~5 的代號, 綠色方塊必須依照順序, 分別採最短距離"吃掉" 標號 1~5 的紅色方塊.</p>
<p style="padding-left: 30px;">2. 承接上一題, 當綠色方塊分別按照順序"吃掉"各紅色方塊過程, 必須避開非目標編號的其他紅色方塊.</p>
<p style="padding-left: 30px;">3. 承接上一題, 在畫面中列出綠色方塊每走一步即增量行走步數的 counter, 以及計算"吃掉"紅色方塊總數.</p>
<p style="padding-left: 30px;">4. 承接上一題, 在畫面中以隨機方式產生五個藍色方塊, 並將所產生過的所有藍色方塊當作障礙的情況下, 執行上一個題目要求過程五個回合.</p>
<h4>延伸討論:</h4>
<p style="padding-left: 30px;">如何利用控制<a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py">五個紅點方塊</a>的程式, 轉而控制 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 機電模擬場景中的掃地機 (<a href="https://en.wikipedia.org/wiki/Robotic_vacuum_cleaner">Robotic Vacuum Cleaner</a>).</p>
<p style="padding-left: 60px;">1. Brython 控制程式以 <a href="https://brython.info/static_doc/en/ajax.html">AJAX</a> 將控制訊號傳至 Server 端後, 以 <a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">Python Remote API</a> 或 <a href="https://www.coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">Bluezero-based Remote API</a> 控制機電場景中的掃地機.</p>
<p style="padding-left: 60px;">2. 將 Brython 控制方法轉為 CPython, 以 <a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">Python Remote API</a> 或 <a href="https://www.coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">Bluezero-based Remote API</a> 控制機電場景中的掃地機.</p>
<p style="padding-left: 30px;">如何將 <a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py">Cango_three_gears</a> 程式延伸, 利用 <a href="https://drive.google.com/file/d/17wDJd6AeMhwrOzWGO_o8afCEsFKh3Hy9/view">NX1980 portable</a> (for @gm users only) 建立 3D 正齒輪, 並轉入 CoppeliaSim 建立傳動模擬場景.</p>
<p style="padding-left: 60px;">1. 在 <a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py">Cango_three_gears</a> 程式中分別加入三個正齒輪的齒數表單, 可以讓使用者輸入各齒輪的齒數送出後, 在畫布中產生齒輪傳動模擬.</p>
<p style="padding-left: 60px;">2. 將 <a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py">Cango_three_gears</a> 程式與 <a href="http://mde.tw/cad2020/content/HW1_NX.html">NX Python API 程式</a>結合, 讓使用者透過網際表單訂製並取得各種格式的正齒輪零件檔案.</p>
<p style="padding-left: 60px;">3. 將 <a href="https://mde.tw/wcm2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py">Cango_three_gears</a> 程式與<a href="https://wcms-scrum1.herokuapp.com/gear_index">正齒輪齒面寬設計</a>流程 (<a href="https://github.com/mdecourse/wcms-scrum1">原始碼</a>) 結合, 讓使用者透過網際介面執行正齒輪傳動設計, 並與上一題整合, 完成設計後可將正齒輪傳動零件匯入 Coppeliasim 執行場景模擬.</p>
<hr/>
<h4>CoppeliaSim:</h4>
<p>CoppeliaSim Edu may ONLY be used by educational entities composed by following people and institutions:</p>
<p style="padding-left: 30px;">students, teachers and professors<br/>schools and universities</p>
<p>Educational entities do NOT include companies, research institutions, non-profit organisations, foundations, etc.</p>
<p>An educational entity may use CoppeliaSim Edu under following conditions:</p>
<p style="padding-left: 30px;">usage should be non-commercial</p>
<p>cd2022 downloads are provided by cd2022 At mde</p>
<p><a href="https://drive.google.com/file/d/1ZkKa4rl0fsmqsMWegPWjSVUW__9PQ3yh/view?usp=sharing">CoppeliaSim Edu 4.1.0 Portable</a> (official and self-compiled versions)</p>
<p><a href="https://drive.google.com/file/d/16tiFBeeV3OEwomioM9MQxQIUJwEyzcQy/view?usp=sharing">CoppeliaSim Edu 4.2.0 Portable</a> (official version)</p><h2>Project2</h2>
<p>讓 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 動態網站系統具備多人異地同步編輯的功能, 可以將目前的 TinyMCE4 編輯器改為 <a href="https://github.com/ckeditor/ckeditor5">ckeditor5</a>, 並且在區網或廣域網路時啟動 <a href="https://github.com/ckeditor/ckeditor5">ckeditor5</a> 的 realtime 同步編輯功能</p>
<p>Flask and ckeditor4: <a href="https://github.com/greyli/flask-ckeditor">https://github.com/greyli/flask-ckeditor</a> (其他參考:<a href="https://www.codetd.com/en/article/9844870">1</a>, <a href="https://flask-ckeditor.readthedocs.io/en/latest/">2</a>)</p>
<p>Flask and ckeditor5: <a href="https://github.com/boyuan12/note-web">https://github.com/boyuan12/note-web</a></p>
<p>ckeditor5 guides: <a href="https://ckeditor.com/docs/ckeditor5/latest/builds/guides/quick-start.html">https://ckeditor.com/docs/ckeditor5/latest/builds/guides/quick-start.html</a></p>
<h2>Project3</h2>
<p>在網際環境中, 讓多人能在同一個網址下, 執行同步互動 (例如: 兩人分別在不同電腦瀏覽器上, 執行<a href="https://en.wikipedia.org/wiki/Tic-tac-toe">井字棋</a>, 或多人貪食蛇), 則需要透過 <a href="https://en.wikipedia.org/wiki/Operational_transformation">OT</a> 或 <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDT</a> 進行<a href="https://github.com/mdecourse/wcm2022/discussions/4#discussioncomment-2070717">網際同步協同</a>.</p>
<p>(Fig2 from <a href="https://link.springer.com/chapter/10.1007/978-81-322-2638-3_2">Analysis of Operational Transformation Algorithms</a>)</p>
<p><img alt="" height="535" src="/images/operational_transformation.png" width="600"/></p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-24550-3_29.pdf">Conflict-Free Replicated Data Types</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/M8-WFTjZoA0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ZLjl_55um4I" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/hy0ePbpna5Y" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jIR0Ngov7vo" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html">https://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html</a> </p><h1>Internet</h1>
<p>Inter-Networks</p>
<p><a href="https://en.wikipedia.org/wiki/Internet">https://en.wikipedia.org/wiki/Internet</a></p>
<p>回到 1997 年, <a href="https://en.wikipedia.org/wiki/Google">Google</a> 成立的前一年, 看看 <a href="https://link.springer.com/book/10.1007/978-1-349-14456-3">Mastering the Internet</a> (1) 這本電子書, 了解與網際網路相關的各項術語與相關內容.</p>
<p>TCP/IP 被設計用來串聯全球各種網路系統的協定</p>
<p>全球資訊網 (World Wide Web) 是網際網路 (Internet) 架構下的一項重要應用, 讓使用者可以透過瀏覽器連結各種全球資訊網伺服器, 透過超文件擷取資料或透過表單進行互動.</p>
<p>何謂 Internet?</p>
<p>The Internet, itself, is basically the global interconnection of networks and independently connected computers, whereas the WWW is a collection of computers which store digital information and, using standard transmission method (<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>), transmit it over the Internet.</p>
<p>何謂 <a href="https://en.wikipedia.org/wiki/Local_area_network">Local Area Network</a> (區域網路)?</p>
<p>A local area network (LAN) is a computer network that interconnects computers within a limited area such as a residence, school, laboratory, university campus or office building. By contrast, a wide area network (WAN) not only covers a larger geographic distance, but also generally involves leased telecommunication circuits.</p>
<p>何謂 TCP/IP (<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol</a>/<a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol</a>)? <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">Internet Protocol Suite</a> (網際網路協議套組).</p>
<p>The Internet protocol suite, commonly known as TCP/IP, is the set of communications protocols used in the Internet and similar computer networks. The current foundational protocols in the suite are the Transmission Control Protocol (TCP) and the Internet Protocol (IP).</p>
<p>TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network. Major internet applications such as the World Wide Web, email, remote administration, and file transfer rely on TCP, which is part of the Transport Layer of the TCP/IP suite. SSL/TLS often runs on top of TCP.</p>
<p>TCP is connection-oriented, and a connection between client and server is established before data can be sent. The server must be listening (passive open) for connection requests from clients before a connection is established. Three-way handshake (active open), retransmission, and error detection adds to reliability but lengthens latency. Applications that do not require reliable data stream service may use the User Datagram Protocol (UDP), which provides a connectionless datagram service that prioritizes time over reliability. TCP employs network congestion avoidance. However, there are vulnerabilities to TCP, including denial of service, connection hijacking, TCP veto, and reset attack.</p>
<p>The Internet Protocol (IP) is the network layer communications protocol in the Internet protocol suite for relaying datagrams across network boundaries. Its routing function enables internetworking, and essentially establishes the Internet.<br/><br/>IP has the task of delivering packets from the source host to the destination host solely based on the IP addresses in the packet headers. For this purpose, IP defines packet structures that encapsulate the data to be delivered. It also defines addressing methods that are used to label the datagram with source and destination information.</p>
<p>何謂 <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> (Hypertext Markup Language)?</p>
<p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (<a href="https://en.wikipedia.org/wiki/CSS">CSS</a>) and scripting languages such as JavaScript.</p>
<p>何謂 <a href="https://en.wikipedia.org/wiki/JavaScript">Javascript</a>?</p>
<p>JavaScript often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. All major web browsers have a dedicated JavaScript engine to execute the code on users' devices.<br/><br/>JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard. It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the <a href="https://en.wikipedia.org/wiki/Document_Object_Model">Document Object Model</a> (DOM).</p><h2>WWW</h2>
<p>World Wide Web</p>
<p><a href="https://en.wikipedia.org/wiki/World_Wide_Web">https://en.wikipedia.org/wiki/World_Wide_Web</a></p>
<h2>HTML</h2>
<p>HyperText Markup Language</p>
<p><a href="https://en.wikipedia.org/wiki/HTML">https://en.wikipedia.org/wiki/HTML</a></p>
<p>2008 年, <a href="https://en.wikipedia.org/wiki/Git">Git</a> 被創建後三年, HTML 已經推出 HTML5, 2011 年出版的 <a href="https://link.springer.com/book/10.1007/978-1-4302-3387-9">HTML5 Solutions: Essential Techniques for HTML5 Developers</a> (2), 介紹許多全球資訊網 (World Wide Web) 相關的內容.</p><h2>TCPIP</h2>
<p>Transmission Control Protocol</p>
<p>Internet Protocol</p>
<p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">https://en.wikipedia.org/wiki/Internet_protocol_suite</a></p>
<p>1981 - 推出 <a href="https://en.wikipedia.org/wiki/IPv4">IPv4</a></p>
<p>1995 - 推出 <a href="https://en.wikipedia.org/wiki/IPv6">IPv6</a></p>
<p>1998.12 - <a href="https://en.wikipedia.org/wiki/IPv6">IPv6</a> became a Draft Standard for the <a href="https://www.ietf.org/">IETF</a>. <a href="https://datatracker.ietf.org/doc/html/rfc2460">rfc2462</a></p>
<p>2017 - IPv6 正式成為 IP 標準. <a href="https://datatracker.ietf.org/doc/html/rfc8200">rfc8200</a></p>
<p>電腦輔助設計室網路設定:</p>
<p style="padding-left: 30px;">純 IPv6 環境下, 避開非X套件的蠕蟲攻擊之<a href="https://github.com/mdecourse/wcm2022/discussions/2">設定</a>.</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6806-3">Introduction to Python Network Automation</a> (含 Python 簡介)</p><h1>Windows</h1>
<p><a href="https://link.springer.com/book/10.1007/978-981-16-5662-0">電腦結構與組成</a></p>
<p style="padding-left: 30px;">History of Computer Systems<br/>From Logic Circuit to Quantum Circuit<br/>Bus and Interconnection<br/>I/O and Network Interface<br/>Central Processing Unit<br/>Parallel Processing<br/>Communication, TCP/IP, and Internet<br/>Cryptography and Architecture Security</p>
<p>Windows 10</p>
<p>Windows 10 參考書: <a href="https://link.springer.com/book/10.1007/978-1-4842-0925-7">Windows 10 troubleshooting</a> (4) and <a href="https://link.springer.com/book/10.1007/978-1-4842-3294-1">The Windows 10 Productivity Handbook</a> (5).</p>
<p>Create User:</p>
<p style="padding-left: 30px;">cmd execuated as administrator</p>
<p style="padding-left: 30px;">net user USER_NAME PASSWORD /add (新建帳號)</p>
<p style="padding-left: 30px;">net localgroup administrators USER_ACCOUNT /add (將帳號設為管理者)</p>
<p style="padding-left: 30px;">net user USER_ACCOUNT /del (刪除帳號)</p>
<p>Task and Event</p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer</a></p>
<p>BIOS and UEFI</p><h1>Ubuntu</h1>
<p>Ubuntu 參考書: <a href="https://link.springer.com/book/10.1007/978-1-4842-3000-8">Beginning Ubuntu for Windows and Mac Users</a> (6).</p>
<p><a href="https://ubuntu.com/tutorials/ubuntu-on-windows">Ubuntu on Windows</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6873-5">Pro Windows Subsystem for Linux (WSL)</a></p><h1>Git</h1>
<p>Pro Git 參考書: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> (7)</p>
<h4>為什麼要使用 Git?</h4>
<p>Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development.</p>
<p><a href="https://www.atlassian.com/git/tutorials/why-git">Why git</a>? <a href="/downloads/why_git.pdf">why_git.pdf</a></p>
<h4>為什麼要使用 <a href="https://en.wikipedia.org/wiki/GitHub">Github</a>?</h4>
<p><a href="https://kinsta.com/knowledgebase/what-is-github/">What is Github</a>?</p>
<p>GitHub is a cloud-based hosting service that lets you manage Git repositories. If you have open-source projects that use Git, then GitHub is designed to help you better manage them.</p>
<p>GitHub is a website for developers and programmers to collaboratively work on code. The primary benefit of GitHub is its version control system, which allows for seamless collaboration without compromising the integrity of the original project. The projects on GitHub are examples of open-source software.</p><h2>Project1</h2>
<p>使用者利用 template 建立倉儲與網站後, 雙方的倉儲經多次改版後, 如何從原始 template 合併各版本資料的專案值得進行.</p>
<p>How to <a href="https://stackoverflow.com/questions/56577184/github-pull-changes-from-a-template-repository">pull changes from a template repository</a>.</p><h1>Fossil</h1>
<p>Fossil SCM</p>
<p><a href="https://www.fossil-scm.org">https://www.fossil-scm.org</a></p>